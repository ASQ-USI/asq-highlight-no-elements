<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
               "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<title></title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
<meta name="title" content=""/>
<meta name="generator" content="Org-mode"/>
<meta name="generated" content=""/>
<meta name="author" content=""/>
<meta name="description" content=""/>
<meta name="keywords" content=""/>
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  html { font-family: Times, serif; font-size: 12pt; }
  .title  { text-align: center; }
  .todo   { color: red; }
  .done   { color: green; }
  .tag    { background-color: #add8e6; font-weight:normal }
  .target { }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  {margin-left:auto; margin-right:0px;  text-align:right;}
  .left   {margin-left:0px;  margin-right:auto; text-align:left;}
  .center {margin-left:auto; margin-right:auto; text-align:center;}
  p.verse { margin-left: 3% }
  pre {
	border: 1pt solid #AEBDCC;
	background-color: #F3F5F7;
	padding: 5pt;
	font-family: courier, monospace;
        font-size: 90%;
        overflow:auto;
  }
  table { border-collapse: collapse; }
  td, th { vertical-align: top;  }
  th.right  { text-align:center;  }
  th.left   { text-align:center;   }
  th.center { text-align:center; }
  td.right  { text-align:right;  }
  td.left   { text-align:left;   }
  td.center { text-align:center; }
  dt { font-weight: bold; }
  div.figure { padding: 0.5em; }
  div.figure p { text-align: center; }
  div.inlinetask {
    padding:10px;
    border:2px solid gray;
    margin:10px;
    background: #ffffcc;
  }
  textarea { overflow-x: auto; }
  .linenr { font-size:smaller }
  .code-highlighted {background-color:#ffff00;}
  .org-info-js_info-navigation { border-style:none; }
  #org-info-js_console-label { font-size:10px; font-weight:bold;
                               white-space:nowrap; }
  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;
                                 font-weight:bold; }
				 
  		 
				 
      
  /*]]>*/-->
   
   
</style>


<!--Codemirror -->



<link rel="stylesheet" href="js/lib/codemirror/lib/codemirror.css"> 
<link rel="stylesheet" type="text/css" href="css/style.css" />
<link rel="stylesheet" type="text/css" href="css/highlight.css" />


<!-- Bootstrap -->
<link href="css/bootstrap/css/bootstrap.min.css" rel="stylesheet" media="screen">

<script src="js/lib/codemirror/lib/codemirror.js"> </script>
<script src="js/lib/codemirror/mode/clike/clike.js"></script>
<script src="js/lib/ace/src-noconflict/ace.js" type="text/javascript" charset="utf-8"></script>
<script src="js/lib/jquery/jquery.js"></script>
<script src="js/lib/simplecolor/jquery.simple-color.js" type="text/javascript"></script>
<script src="css/bootstrap/js/bootstrap.min.js"></script>
      
<script src="js/highlight.js"></script>

</head>
<body>

<form action="/"  method="post" id="submitform" onsubmit="formIntercept();">
<div id="content">
<h1 class="title"></h1>




<A href="../index.html">Programming Fundamentals II 2013</A>
<center>
<h2>Challenge 01</h2>
<h1>Modeling Time</h1>
</center>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Preparation</h2>
<div class="outline-text-2" id="text-1">






<p>In this challenge we will develop two classes. Therefore, let's first create a project.
</p>
<ol>
<li>Create a new BlueJ project and save it under the name "Time".
</li>
<li>Open the <a href="https://docs.google.com/forms/d/1pRGF0YATUeqguCCeuG_qJXpjRLjaE7Om2MJkM5mcPoM/viewform">Google Form</a> 
   so you can submit the answers to the following questions.
</li>
</ol>





</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Modeling a Point in Time</h2>
<div class="outline-text-2" id="text-2">

<p>Let's develop a class called <code>TimeStamp</code> that can be used to represent a point in time. Let's assume 
that the time in the modelled system is always increasing and there is not any cycle.
</p>

</div>

<div id="outline-container-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> Usage of the <code>TimeStamp</code> Class</h3>
<div class="outline-text-3" id="text-2-1">

<p>Before hacking any code, let's see how we would use such a <code>TimeStamp</code> class.
</p>



<pre class="src src-java"><span style="color: #CCCCFF;">TimeStamp</span> <span style="color: #CCFFFF;">end</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeStamp</span>(4); <span style="color: #999999;">// </span><span style="color: #999999;">create a TimeStamp</span>
<span style="color: #CCCCFF;">TimeStamp</span> <span style="color: #CCFFFF;">start</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeStamp</span>(2); <span style="color: #999999;">// </span><span style="color: #999999;">create another TimeStamp</span>
</pre>


<p>
The above code would create two <code>TimeStamp</code> objects, one representing time 4, the other representing time 2.
Let's assume that smaller numbers represent earlier points in time.
</p>
<p>
Now we may want to compare two TimeStamps:
</p>



<pre class="src src-java"><span style="color: #CCCCFF;">boolean</span> <span style="color: #CCFFFF;">equal</span> = end.equalTo(start); <span style="color: #999999;">// </span><span style="color: #999999;">check whether the two TimeStamps represent the same point in time</span>
<span style="color: #CCCCFF;">boolean</span> <span style="color: #CCFFFF;">endAfterStart</span> = end.after(start); <span style="color: #999999;">// </span><span style="color: #999999;">check whether end comes after start</span>
<span style="color: #CCCCFF;">boolean</span> <span style="color: #CCFFFF;">endBeforeStart</span> = end.before(start); <span style="color: #999999;">// </span><span style="color: #999999;">check whether end comes before start</span>
</pre>


<p>
<b>Question 1</b>: Highlight literals of the following types: int (red), double (blue), float (green)
<input type="text" class='simple_color' value='#ff0000'/>


<div id="editor">public class C {
    public void m() {
        int i = i + 5 + ((int)5.0) + ((int)5f);
    }
}
</div>
<div id="ranges">
      <textarea id="rangestext"></textarea>
</div>


</p>






<!--<p>
<b>Question 2</b>: <%-questions[1]%>
</p> -->
<p>
Now, assume we created another <code>TimeStamp</code>:
</p>



<pre class="src src-java"><span style="color: #CCCCFF;">TimeStamp</span> <span style="color: #CCFFFF;">t</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeStamp</span>(2); <span style="color: #999999;">// </span><span style="color: #999999;">create a TimeStamp</span>
<span style="color: #CCCCFF;">boolean</span> <span style="color: #CCFFFF;">tEqualToStart</span> = t.equalTo(start);
</pre>


<p>
<b>Question 3</b>: What value should <code>tEqualToStart</code> have? Are <code>t</code> and <code>start</code> two separate objects?
</p>
<p>
Besides finding out whether one happens before, at the same time, or later than the other, 
we also may want to compute how much time passed between two <code>TimeStamps</code>.
</p>



<pre class="src src-java"><span style="color: #CCCCFF;">int</span> <span style="color: #CCFFFF;">duration</span> = start.getDurationUntil(end); <span style="color: #999999;">// </span><span style="color: #999999;">compute the duration from start to end</span>
</pre>


<p>
<b>Question 4</b>: What would you expect as the result of <code>start.getDurationUntil(end)</code>? What about <code>end.getDurationUntil(start)</code>?
</p>
<p>
Finally, we may want to easily get the later or the earlier of two <code>TimeStamps</code> as follows:
</p>



<pre class="src src-java"><span style="color: #CCCCFF;">TimeStamp</span> <span style="color: #CCFFFF;">later</span> = start.getLater(end);
<span style="color: #CCCCFF;">TimeStamp</span> <span style="color: #CCFFFF;">earlier</span> = start.getEarlier(end);
</pre>


<p>
<b>Question 5</b>: Will <code>end.getLater(start)</code> return the same result as <code>start.getLater(end)</code>?
</p>

</div>

</div>

<div id="outline-container-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> Implementation of the <code>TimeStamp</code> Class</h3>
<div class="outline-text-3" id="text-2-2">

<p>We want our class to be <i>immutable</i>, that is, a <code>TimeStamp</code> object, once created, cannot be modified.
Thus, we will not have any mutator (setter) methods in our class.
Now let's get started with the implementation:
</p>
<ol>
<li>Create a class called <code>TimeStamp</code>:



<pre class="src src-java"><span style="color: #99CCFF;">public</span> <span style="color: #99CCFF;">class</span> <span style="color: #CCCCFF;">TimeStamp</span> {

}
</pre>

</li>
<li>In that class, add an instance variable of type <code>int</code> with name <code>time</code>. 
  This is the only instance variable of this class. 
  It represents the time as an integer number (a smaller number means an earlier time).
</li>
<li>Add a constructor taking a parameter of type <code>int</code> with name <code>time</code>, 
  who stores the value of that parameter in the instance variable with name <code>time</code>.
</li>
<li>Add three methods, <code>equalTo(TimeStamp other)</code>, <code>after(TimeStamp other)</code>, and <code>before(TimeStamp other)</code>. 
  These methods have to compare this <code>TimeStamp</code>'s time to the other <code>TimeStamp</code>'s time, and return true or false accordingly.
  For example, <code>after</code> (which means "this comes after other") returns true 
  if this <code>TimeStamp</code>'s time is greater than the other <code>TimeStamp</code>'s time.
</li>
<li>Test the three methods by creating <code>TimeStamp</code> objects in BlueJ and invoking the methods on them.
</li>
<li>Add a method <code>getDurationUntil(TimeStamp other)</code> that returns the duration from this TimeStamp until the other TimeStamp.
</li>
<li>Test your method in BlueJ.
</li>
<li>Add a method <code>getLater(TimeStamp other)</code> that looks at this TimeStamp and the other TimeStamp and returns the one that represents the later point in time.
  Extra requirement: use the <code>after</code> method.
</li>
<li>Test your method in BlueJ.
</li>
<li>Add a method <code>getEarlier(TimeStamp other)</code> that looks at this TimeStamp and the other TimeStamp and returns the one that represents the earlier point in time.
  Extra requirement: use the <code>before</code> method.
</li>
<li>Test your method in BlueJ.
</li>
</ol>




</div>
</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Modeling a Time Interval</h2>
<div class="outline-text-2" id="text-3">

<p>Now we develop a class called <code>TimeInterval</code> that represents the interval between two <code>TimeStamps</code>.
</p>


</div>

<div id="outline-container-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Usage of the <code>TimeInterval</code> Class</h3>
<div class="outline-text-3" id="text-3-1">


<p>
To create a <code>TimeInterval</code>, we use its constructor that takes a start and an end <code>TimeStamp</code>.
</p>



<pre class="src src-java"><span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">t</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeInterval</span>(start, end);
</pre>


<p>
A <code>TimeInterval</code> is a half-open interval [start,end).
It excludes the end point.
</p>
<p>
We can visualize a <code>TimeInterval</code> as a sequence of letters (e.g., "T"s), one for every <code>TimeStamp</code> it includes.
Note that the end point is <b>not</b> included.
</p>



<pre class="src src-text">TTTTTT.
^     ^
|     |
|     \--end
|
\--start
</pre>


<p>
Let's first define a few <code>TimeStamps</code> which we can use to create <code>TimeIntervals</code>:
</p>



<pre class="src src-java"><span style="color: #CCCCFF;">TimeStamp</span> <span style="color: #CCFFFF;">t1</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeStamp</span>(1);
<span style="color: #CCCCFF;">TimeStamp</span> <span style="color: #CCFFFF;">t2</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeStamp</span>(2);
<span style="color: #CCCCFF;">TimeStamp</span> <span style="color: #CCFFFF;">t3</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeStamp</span>(3);
<span style="color: #CCCCFF;">TimeStamp</span> <span style="color: #CCFFFF;">t4</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeStamp</span>(4);
<span style="color: #CCCCFF;">TimeStamp</span> <span style="color: #CCFFFF;">t5</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeStamp</span>(5);
<span style="color: #CCCCFF;">TimeStamp</span> <span style="color: #CCFFFF;">t6</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeStamp</span>(6);
<span style="color: #CCCCFF;">TimeStamp</span> <span style="color: #CCFFFF;">t7</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeStamp</span>(7);
</pre>


<p>
We need a method to compute the duration of a <code>TimeInterval</code>:
</p>



<pre class="src src-java"><span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">i</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeInterval</span>(t1, t3);
<span style="color: #CCCCFF;">int</span> <span style="color: #CCFFFF;">duration</span> = i.getDuration();
</pre>


<p>
<b>Question 6</b>: Given that time intervals are half-open, what should the value of <code>duration</code> be? 
</p>

<p>
As Allen has shown in his paper <a href="http://portal.acm.org/citation.cfm?id=358434">Maintaining Knowledge about Temporal Intervals</a>,
a time interval supports 13 different binary relations.
The following table lists these relations and visualizes them with a little diagram
(<code>TTT</code> refers to this <code>TimeInterval</code>, whereas <code>OOO</code> refers to the other <code>TimeInterval</code>).
For each relation we want to have a method in class <code>TimeInterval</code>
that represents a predicate to test whether two <code>TimeIntervals</code> (e.g., <code>TTT</code> and <code>OOO</code>) are in that relation.
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption></caption>
<colgroup><col class="left" /><col class="left" /><col class="left" /><col class="left" />
</colgroup>
<thead>
<tr><th scope="col" class="left">Allen</th><th scope="col" class="left">Method Name</th><th scope="col" class="left">Diagram</th><th scope="col" class="left">Comment</th></tr>
</thead>
<tbody>
<tr><td class="left">=</td><td class="left">equalTo</td><td class="left"><code>....TTT....</code></td><td class="left">symmetric</td></tr>
<tr><td class="left"></td><td class="left"></td><td class="left"><code>....OOO....</code></td><td class="left"></td></tr>
</tbody>
<tbody>
<tr><td class="left">&lt;</td><td class="left">before</td><td class="left"><code>TTT........</code></td><td class="left">inverse of after</td></tr>
<tr><td class="left"></td><td class="left"></td><td class="left"><code>....OOO....</code></td><td class="left"></td></tr>
</tbody>
<tbody>
<tr><td class="left">&gt;</td><td class="left">after</td><td class="left"><code>........TTT</code></td><td class="left">inverse of before</td></tr>
<tr><td class="left"></td><td class="left"></td><td class="left"><code>....OOO....</code></td><td class="left"></td></tr>
</tbody>
<tbody>
<tr><td class="left">m</td><td class="left">meetsBeginOf</td><td class="left"><code>.TTT.......</code></td><td class="left">inverse of meetsEndOf</td></tr>
<tr><td class="left"></td><td class="left"></td><td class="left"><code>....OOO....</code></td><td class="left"></td></tr>
</tbody>
<tbody>
<tr><td class="left">mi</td><td class="left">meetsEndOf</td><td class="left"><code>.......TTT.</code></td><td class="left">inverse of meetsBeginOf</td></tr>
<tr><td class="left"></td><td class="left"></td><td class="left"><code>....OOO....</code></td><td class="left"></td></tr>
</tbody>
<tbody>
<tr><td class="left">o</td><td class="left">overlapsBeginOf</td><td class="left"><code>...TTT.....</code></td><td class="left">inverse of overlapsEndOf</td></tr>
<tr><td class="left"></td><td class="left"></td><td class="left"><code>....OOO....</code></td><td class="left"></td></tr>
</tbody>
<tbody>
<tr><td class="left">oi</td><td class="left">overlapsEndOf</td><td class="left"><code>.....TTT...</code></td><td class="left">inverse of overlapsBeginOf</td></tr>
<tr><td class="left"></td><td class="left"></td><td class="left"><code>....OOO....</code></td><td class="left"></td></tr>
</tbody>
<tbody>
<tr><td class="left">d</td><td class="left">during</td><td class="left"><code>....TTT....</code></td><td class="left">inverse of contains</td></tr>
<tr><td class="left"></td><td class="left"></td><td class="left"><code>...OOOOO...</code></td><td class="left"></td></tr>
</tbody>
<tbody>
<tr><td class="left">di</td><td class="left">contains</td><td class="left"><code>...TTTTT...</code></td><td class="left">inverse of during</td></tr>
<tr><td class="left"></td><td class="left"></td><td class="left"><code>....OOO....</code></td><td class="left"></td></tr>
</tbody>
<tbody>
<tr><td class="left">s</td><td class="left">starts</td><td class="left"><code>...TTT.....</code></td><td class="left">inverse of startedBy</td></tr>
<tr><td class="left"></td><td class="left"></td><td class="left"><code>...OOOOO...</code></td><td class="left"></td></tr>
</tbody>
<tbody>
<tr><td class="left">si</td><td class="left">startedBy</td><td class="left"><code>...TTTTT...</code></td><td class="left">inverse of starts</td></tr>
<tr><td class="left"></td><td class="left"></td><td class="left"><code>...OOO.....</code></td><td class="left"></td></tr>
</tbody>
<tbody>
<tr><td class="left">f</td><td class="left">finishes</td><td class="left"><code>.....TTT...</code></td><td class="left">inverse of finishedBy</td></tr>
<tr><td class="left"></td><td class="left"></td><td class="left"><code>...OOOOO...</code></td><td class="left"></td></tr>
</tbody>
<tbody>
<tr><td class="left">fi</td><td class="left">finishedBy</td><td class="left"><code>...TTTTT...</code></td><td class="left">inverse of finishes</td></tr>
<tr><td class="left"></td><td class="left"></td><td class="left"><code>.....OOO...</code></td><td class="left"></td></tr>
</tbody>
</table>


<p>
In the above table, e.g., the <i>before</i> relation (Allen's "&lt;") represents whether 
this interval (<code>TTT</code>) happened before the other interval (<code>OOO</code>).
</p>
<p>
Now let's define a few <code>TimeIntervals</code>:
</p>



<pre class="src src-java">                                              <span style="color: #999999;">// </span><span style="color: #999999;">012345678</span>
<span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">i13</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeInterval</span>(t1, t3);  <span style="color: #999999;">//  </span><span style="color: #999999;">TT.</span>
<span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">i27</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeInterval</span>(t2, t7);  <span style="color: #999999;">//   </span><span style="color: #999999;">TTTTT.</span>
<span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">i37</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeInterval</span>(t3, t7);  <span style="color: #999999;">//    </span><span style="color: #999999;">TTTT.</span>
<span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">i47</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeInterval</span>(t4, t7);  <span style="color: #999999;">//     </span><span style="color: #999999;">TTT.</span>
<span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">i57</span> = <span style="color: #99CCFF;">new</span> <span style="color: #CCCCFF;">TimeInterval</span>(t5, t7);  <span style="color: #999999;">//      </span><span style="color: #999999;">TT.</span>
</pre>


<p>
Let's try the <code>before</code> method:
</p>



<pre class="src src-java"><span style="color: #CCCCFF;">boolean</span> <span style="color: #CCFFFF;">i13BeforeI27</span> = i13.before(i27); <span style="color: #999999;">// </span><span style="color: #999999;">does interval i13 happen before interval i27?</span>
<span style="color: #CCCCFF;">boolean</span> <span style="color: #CCFFFF;">i13BeforeI37</span> = i13.before(i37); <span style="color: #999999;">// </span><span style="color: #999999;">does interval i13 happen before interval i37?</span>
<span style="color: #CCCCFF;">boolean</span> <span style="color: #CCFFFF;">i13BeforeI47</span> = i13.before(i47); <span style="color: #999999;">// </span><span style="color: #999999;">does interval i13 happen before interval i47?</span>
<span style="color: #CCCCFF;">boolean</span> <span style="color: #CCFFFF;">i13BeforeI57</span> = i13.before(i57); <span style="color: #999999;">// </span><span style="color: #999999;">does interval i13 happen before interval i57?</span>
</pre>


<p>
<b>Question 7</b>: In the above code, what is the value of the four boolean variables?
Note that the end point of an interval is <b>not</b> part of that interval
(the intervals are open to the right side).
</p>
<p>
Note that any given pair of intervals is in exactly one of the 13 relations.
Thus, for any given pair of <code>TimeIntervals</code>, one and only one of the 13 predicates will be true.
E.g., if <code>a.before(b)</code> then it does <b>not</b> <code>a.meetsBeginOf(b)</code>
(<code>a.before(b)</code> means that there is a gap between a and b).
</p>
<p>
12 of the 13 predicates (all except <code>equalsTo</code>) have inverses. 
E.g., the inverse of <code>starts</code> is <code>startedBy</code>: <code>a.starts(b)</code> == <code>b.startedBy(a)</code>.
</p>
<p>
<b>Question 8</b>: For intervals i13 and i47, which predicate is true (i.e., what is the name of method <code>xxx</code> that returns true when called like <code>i13.xxx(i47)</code>)? 
And which predicate is its inverse (i.e., what is the name of method <code>yyy</code> that returns true when called like <code>i47.yyy(i13)</code>).
</p>
<p>
Besides the above 13 predicates, we also would like to provide two derived predicates:
<code>intersects</code> and <code>disjoint</code>.
</p>
<p>
Two <code>TimeIntervals</code> intersect if they have <i>some</i> point in common.
</p>



<pre class="src src-java"><span style="color: #CCCCFF;">boolean</span> <span style="color: #CCFFFF;">i13IntersectI37</span> = i13.intersects(i37); <span style="color: #999999;">// </span><span style="color: #999999;">does interval i13 intersect interval i37 (do i13 and i37 have a point in common)?</span>
</pre>


<p>
<b>Question 9</b>: What is the value of <code>i13IntersectsI37</code>?
</p>
<p>
<b>Question 10</b>: Define <code>intersects</code> as a disjunction (logical formula using "or") of some of the above 13 predicates.
</p>
<p>
Two <code>TimeIntervals</code> are disjoint if they have <i>no</i> point in common.
</p>
<p>
<b>Question 11</b>: Define <code>disjoint</code> as a disjunction (logical formula using "or") of some of the above 13 predicates.
</p>
<p>
<b>Question 12</b>: Are the two relations (<code>intersects</code> and <code>disjoint</code>) mutually exclusive, that is,
a pair of <code>TimeIntervals</code> either intersects or is disjoint?
</p>
<p>
Finally, we want a way to compute the <i>intersection</i> and the <i>hull</i> of two <code>TimeIntervals</code>.
The intersection corresponds to the interval <i>included in</i> both intervals.
The hull corresponds to the interval <i>including</i> both intervals.
</p>



<pre class="src src-java"><span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">intersectionOfI13AndI13</span> = i13.getIntersection(i13);
<span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">intersectionOfI13AndI27</span> = i13.getIntersection(i27);
<span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">intersectionOfI13AndI37</span> = i13.getIntersection(i37);
<span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">intersectionOfI13AndI47</span> = i13.getIntersection(i47);
<span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">intersectionOfI13AndI57</span> = i13.getIntersection(i57);
<span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">hullOfI13AndI13</span> = i13.getHull(i13);
<span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">hullOfI13AndI27</span> = i13.getHull(i27);
<span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">hullOfI13AndI37</span> = i13.getHull(i37);
<span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">hullOfI13AndI47</span> = i13.getHull(i47);
<span style="color: #CCCCFF;">TimeInterval</span> <span style="color: #CCFFFF;">hullOfI13AndI57</span> = i13.getHull(i57);
</pre>


<p>
<b>Question 13</b>: What should the ten resulting <code>TimeIntervals</code> be? Why?
</p>


</div>

</div>

<div id="outline-container-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> Implementation of the <code>TimeInterval</code> Class</h3>
<div class="outline-text-3" id="text-3-2">

<p>A TimeInterval is immutable.
</p>
<p>
In your implementation of the <code>TimeInterval</code> methods,
use the <code>TimeStamp.equalTo()</code>, <code>TimeStamp.before()</code>, and <code>TimeStamp.after()</code> methods.
</p>
<ol>
<li>Create a class called <code>TimeInterval</code>.
</li>
<li>Add two instance variables, <code>begin</code> and <code>end</code>, of type <code>TimeStamp</code>.
</li>
<li>Add a constructor, <code>TimeInterval(TimeStamp begin, TimeStamp end)</code> that assigns the parameters' values to the corresponding instance variables.
</li>
<li>Add an <code>equalTo</code> method that compares this <code>TimeInterval</code> to the other <code>TimeInterval</code>.
</li>
<li>Test your methods in BlueJ.
</li>
<li>Add a <code>before</code> and an <code>after</code> method. Try to implement one of them by calling the other.
</li>
<li>Test your methods in BlueJ.
</li>
<li>Add the remaining 10 of the 13 predicate methods (<code>meetsBeginOf</code> &hellip; <code>finishedBy</code>). 
   For each couple of inverses, implement one of them by calling the <code>TimeStamp</code> methods, and implement the other by calling its inverse method of <code>TimeInterval</code>.
</li>
<li>Add the <code>intersects</code> and the <code>disjoint</code> methods. Try to implement them by calling some of the 13 predicate methods.
</li>
<li>Test your methods in BlueJ.
</li>
<li>Add the <code>getIntersection</code> and <code>getHull</code> methods.
</li>
<li>Test your methods in BlueJ.
</li>
</ol>


<p>
<b>Question 14</b>: Did you have any problems implementing the 13 predicates by using the given <code>TimeStamp</code> class?
Did the <code>TimeStamp</code> class offer all the features you needed? 
If not, what functionality was missing?
</p>
<p>
<b>Question 15</b>: Are there ways to call the <code>TimeInterval</code> constructor that might break things?
</p>

</div>
</div>

</div>

<div id="outline-container-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Wrap-Up</h2>
<div class="outline-text-2" id="text-4">


<p>
Please perform the following steps even if you ran out of time and didn't complete the entire challenge.
</p>
<ol>
<li>Submit your Google Form with your answers. Even submit it if you did not complete everything. Note: you need to go all the way to the last (third) page of the form and hit the "submit" button to submit it.
</li>
<li>Zip up your BlueJ project (containing your two classes, <code>TimeStamp</code> and <code>TimeInterval</code>).
</li>
<li>Rename your Zip file into <i>lastname</i>.zip (where <i>lastname</i> is your lastname), e.g., <code>Hauswirth.zip</code>.
</li>
<li>Upload your Zip file to <a href="http://www2.icorsi.ch/mod/assignment/view.php?id=93653">Moodle</a> (note, while this will not be graded, you <b>have to</b> upload whatever you have at the end of the lecture).
</li>
</ol>


<p>
Thanks!
</p></div>
</div>
</div>
</form>

</body>
</html>



